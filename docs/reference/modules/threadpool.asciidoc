[[modules-threadpool]]
== Thread Pool

A node holds several thread pools in order to improve how threads memory consumption
are managed within a node. Many of these pools also have queues associated with them,
which allow pending requests to be held instead
of discarded.


There are several thread pools, but the important ones include:

`generic`::
    For generic operations (e.g., background node discovery).
    Thread pool type is `cached`.

`index`::
    For index/delete operations. Thread pool type is `fixed`
    with a size of `# of available processors`,
    queue_size of `200`.

`search`::
    For count/search operations. Thread pool type is `fixed`
    with a size of `int((# of available_processors * 3) / 2) + 1`,
    queue_size of `1000`.

`suggest`::
    For suggest operations. Thread pool type is `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`get`::
    For get operations. Thread pool type is `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`bulk`::
    For bulk operations. Thread pool type is `fixed`
    with a size of `# of available processors`,
    queue_size of `50`.

`percolate`::
    For percolate operations. Thread pool type is `fixed`
    with a size of `# of available processors`,
    queue_size of `1000`.

`snapshot`::
    For snapshot/restore operations. Thread pool type is `scaling` with a
    keep-alive of `5m` and a size of `min(5, (# of available processors)/2)`.

`warmer`::
    For segment warm-up operations. Thread pool type is `scaling` with a
    keep-alive of `5m` and a size of `min(5, (# of available processors)/2)`.

`refresh`::
    For refresh operations. Thread pool type is `scaling` with a
    keep-alive of `5m` and a size of `min(10, (# of available processors)/2)`.

`listener`::
    Mainly for java client executing of action when listener threaded is set to true.
    Thread pool type is `scaling` with a default size of `min(10, (# of available processors)/2)`.

Changing a specific thread pool can be done by setting its type-specific parameters; for example, changing the `index`
thread pool to have more threads:

[source,yaml]
--------------------------------------------------
threadpool:
    index:
        size: 30
--------------------------------------------------

NOTE: you can update thread pool settings dynamically using <<cluster-update-settings>>.

[float]
[[types]]
=== Thread pool types

The following are the types of thread pools and their respective parameters:

[float]
==== `cached`

The `cached` thread pool is an unbounded thread pool that will spawn a
thread if there are pending requests. This thread pool is used to
prevent requests submitted to this pool from blocking or being
rejected. Unused threads in this thread pool will be terminated after
a keep alive expires (defaults to five minutes). The `cached` thread
pool is reserved for the <<modules-threadpool,`generic`>> thread pool.

The `keep_alive` parameter determines how long a thread should be kept
around in the thread pool without doing any work.

[source,yaml]
--------------------------------------------------
threadpool:
    generic:
        keep_alive: 2m
--------------------------------------------------

[float]
==== `fixed`

The `fixed` thread pool holds a fixed size of threads to handle the
requests with a queue (optionally bounded) for pending requests that
have no threads to service them.

The `size` parameter controls the number of threads, and defaults to the
number of cores times 5.

The `queue_size` allows to control the size of the queue of pending
requests that have no threads to execute them. By default, it is set to
`-1` which means its unbounded. When a request comes in and the queue is
full, it will abort the request.

[source,yaml]
--------------------------------------------------
threadpool:
    index:
        size: 30
        queue_size: 1000
--------------------------------------------------

[float]
==== `scaling`

The `scaling` thread pool holds a dynamic number of threads. This number is
proportional to the workload and varies between 1 and the value of the
`size` parameter.

The `keep_alive` parameter determines how long a thread should be kept
around in the thread pool without it doing any work.

[source,yaml]
--------------------------------------------------
threadpool:
    warmer:
        size: 8
        keep_alive: 2m
--------------------------------------------------

[float]
[[processors]]
=== Processors setting
The number of processors is automatically detected, and the thread pool
settings are automatically set based on it. In some cases it can be
useful to override the number of detected processors. This can be done
by explicitly setting the `processors` setting.

[source,yaml]
--------------------------------------------------
processors: 2
--------------------------------------------------

There are a few use-cases for explicitly overriding the `processors`
setting:

. If you are running multiple instances of Elasticsearch on the same
host but want Elasticsearch to size its thread pools as if it only has a
fraction of the CPU, you should override the `processors` setting to the
desired fraction (e.g., if you're running two instances of Elasticsearch
on a 16-core machine, set `processors` to 8). Note that this is an
expert-level use-case and there's a lot more involved than just setting
the `processors` setting as there are other considerations like changing
the number of garbage collector threads, pinning processes to cores,
etc.
. The number of processors is by default bounded to 32. This means that
on systems that have more than 32 processors, Elasticsearch will size
its thread pools as if there are only 32 processors present. This
limitation was added to avoid creating too many threads on systems that
have not properly adjusted the `ulimit` for max number of processes. In
cases where you've adjusted the `ulimit` appropriately, you can override
this bound by explicitly setting the `processors` setting.
. Sometimes the number of processors is wrongly detected and in such
cases explicitly setting the `processors` setting will workaround such
issues.

In order to check the number of processors detected, use the nodes info
API with the `os` flag.
